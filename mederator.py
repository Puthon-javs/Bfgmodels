"""
Telegram Moderation Module
Version: 1.1
Commands: –±–∞–Ω, –º—É—Ç, –≤–∞—Ä–Ω, —Ä–∞–∑–±–∞–Ω, —Ä–∞–∑–º—É—Ç, —Å–Ω—è—Ç—å–≤–∞—Ä–Ω
GitHub: https://raw.githubusercontent.com/[–í–ê–®_–õ–û–ì–ò–ù]/[–†–ï–ü–û–ó–ò–¢–û–†–ò–ô]/main/moderation.py
"""

from aiogram import Bot, types
from aiogram.utils.exceptions import BadRequest
from datetime import datetime, timedelta
import asyncio

class TelegramModerator:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.temp_data = {
            'bans': {},
            'mutes': {},
            'warns': {}
        }

    async def parse_time(self, text: str) -> timedelta:
        """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '1 —á–∞—Å', '3 –¥–Ω—è' –∏ —Ç.–¥."""
        units = {
            '–º–∏–Ω': 'minutes',
            '—á–∞—Å': 'hours',
            '–¥–µ–Ω—å': 'days',
            '–¥–Ω—è': 'days',
            '–Ω–µ–¥–µ–ª': 'weeks'
        }
        
        parts = text.split()
        if len(parts) != 2:
            return timedelta(minutes=10)  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º—É—Ç–∞
            
        num, unit = parts
        num = int(num) if num.isdigit() else 1
        
        for key in units:
            if unit.startswith(key):
                return timedelta(**{units[key]: num})
                
        return timedelta(days=1)  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω

    async def ban_user(self, chat_id: int, user_id: int, duration: str = "1 –¥–µ–Ω—å", reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
        """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            delta = await self.parse_time(duration)
            until_date = datetime.now() + delta
            
            await self.bot.ban_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                until_date=until_date
            )
            
            # –ê–≤—Ç–æ—Ä–∞–∑–±–∞–Ω
            if delta:
                async def auto_unban():
                    await asyncio.sleep(delta.total_seconds())
                    await self.unban_user(chat_id, user_id)
                asyncio.create_task(auto_unban())
            
            return f"üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {duration}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        except BadRequest as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"

    async def unban_user(self, chat_id: int, user_id: int):
        """–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.bot.unban_chat_member(chat_id, user_id)
            return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω"
        except BadRequest as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"

    async def mute_user(self, chat_id: int, user_id: int, duration: str = "10 –º–∏–Ω—É—Ç", reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
        """–ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            delta = await self.parse_time(duration)
            until_date = datetime.now() + delta
            
            await self.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=types.ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_other_messages=False
                ),
                until_date=until_date
            )
            
            # –ê–≤—Ç–æ—Ä–∞–∑–º—É—Ç
            if delta:
                async def auto_unmute():
                    await asyncio.sleep(delta.total_seconds())
                    await self.unmute_user(chat_id, user_id)
                asyncio.create_task(auto_unmute())
            
            return f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –º—É—Ç–µ –Ω–∞ {duration}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        except BadRequest as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"

    async def unmute_user(self, chat_id: int, user_id: int):
        """–°–Ω—è—Ç—å –º—É—Ç"""
        try:
            await self.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=types.ChatPermissions.all()
            )
            return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–º—É—á–µ–Ω"
        except BadRequest as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"

    async def warn_user(self, user_id: int, duration: str = "1 –¥–µ–Ω—å", reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
        """–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        delta = await self.parse_time(duration)
        return f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ {duration}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"

    async def unwarn_user(self, user_id: int):
        """–°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        return f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
