from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import BadRequest
from datetime import datetime, timedelta
import asyncio

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ, –ª—É—á—à–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
temp_data = {
    "bans": {},
    "warns": {},
    "mutes": {}
}

class Moderation:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def parse_time(self, time_str: str) -> timedelta | None:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1 —á–∞—Å', '3 –¥–Ω—è')"""
        time_str = time_str.lower()
        if time_str == "–Ω–∞–≤—Å–µ–≥–¥–∞":
            return None

        time_units = {
            "—Å–µ–∫": "seconds",
            "—Å–µ–∫—É–Ω–¥": "seconds",
            "–º–∏–Ω": "minutes",
            "–º–∏–Ω—É—Ç": "minutes",
            "—á–∞—Å": "hours",
            "—á–∞—Å–æ–≤": "hours",
            "–¥–µ–Ω—å": "days",
            "–¥–Ω–µ–π": "days",
            "–Ω–µ–¥–µ–ª": "weeks",
            "–Ω–µ–¥–µ–ª—è": "weeks",
        }

        parts = time_str.split()
        if len(parts) != 2:
            return None  # –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        num, unit = parts
        try:
            num = int(num)
        except ValueError:
            return None

        for key in time_units:
            if unit.startswith(key):
                unit = time_units[key]
                break
        else:
            return None

        kwargs = {unit: num}
        return timedelta(**kwargs)

    async def ban_user(
        self,
        message: types.Message,
        user_id: int,
        duration: str = "3 –¥–Ω—è",
        reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    ):
        """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        delta = await self.parse_time(duration)
        until_date = datetime.now() + delta if delta else None

        try:
            await self.bot.ban_chat_member(
                chat_id=message.chat.id,
                user_id=user_id,
                until_date=until_date
            )
            reply = (
                f"üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_id}</b> –∑–∞–±–∞–Ω–µ–Ω.\n"
                f"‚è≥ –°—Ä–æ–∫: <b>{duration}</b>\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>"
            )
            await message.reply(reply, parse_mode="HTML")

            # –ê–≤—Ç–æ—Ä–∞–∑–±–∞–Ω (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è)
            if delta:
                await asyncio.sleep(delta.total_seconds())
                await self.bot.unban_chat_member(
                    chat_id=message.chat.id,
                    user_id=user_id
                )

        except BadRequest as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def unban_user(self, message: types.Message, user_id: int):
        """–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.bot.unban_chat_member(
                chat_id=message.chat.id,
                user_id=user_id
            )
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_id}</b> —Ä–∞–∑–±–∞–Ω–µ–Ω.", parse_mode="HTML")
        except BadRequest as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def warn_user(
        self,
        message: types.Message,
        user_id: int,
        duration: str = "3 –¥–Ω—è",
        reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    ):
        """–í–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        delta = await self.parse_time(duration)
        reply = (
            f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_id}</b> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n"
            f"‚è≥ –°—Ä–æ–∫: <b>{duration}</b>\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>"
        )
        await message.reply(reply, parse_mode="HTML")

    async def unwarn_user(self, message: types.Message, user_id: int):
        """–°–Ω—è—Ç—å –≤–∞—Ä–Ω"""
        await message.reply(f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_id}</b> —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.", parse_mode="HTML")

    async def mute_user(
        self,
        message: types.Message,
        user_id: int,
        duration: str = "10 –º–∏–Ω—É—Ç",
        reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    ):
        """–ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        delta = await self.parse_time(duration) or timedelta(minutes=10)

        try:
            await self.bot.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=user_id,
                permissions=types.ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_polls=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False
                ),
                until_date=datetime.now() + delta
            )
            reply = (
                f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_id}</b> –≤ –º—É—Ç–µ.\n"
                f"‚è≥ –°—Ä–æ–∫: <b>{duration}</b>\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>"
            )
            await message.reply(reply, parse_mode="HTML")

        except BadRequest as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def unmute_user(self, message: types.Message, user_id: int):
        """–°–Ω—è—Ç—å –º—É—Ç"""
        try:
            await self.bot.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=user_id,
                permissions=types.ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_polls=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True
                )
            )
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_id}</b> —Ä–∞–∑–º—É—á–µ–Ω.", parse_mode="HTML")
        except BadRequest as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")