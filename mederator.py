from aiogram import Bot, types
from aiogram.utils.exceptions import BadRequest
from datetime import datetime, timedelta
import asyncio

class TelegramModerator:
    """
    –ú–æ–¥—É–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Telegram-–±–æ—Ç–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã:
    - –±–∞–Ω [ID] [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞]
    - —Ä–∞–∑–±–∞–Ω [ID]
    - –≤–∞—Ä–Ω [ID] [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞]
    - —Å–Ω—è—Ç—å–≤–∞—Ä–Ω [ID]
    - –º—É—Ç [ID] [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞]
    - —Ä–∞–∑–º—É—Ç [ID]
    """

    def __init__(self, bot: Bot):
        self.bot = bot

    async def _parse_time(self, time_str: str) -> timedelta:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '1 —á–∞—Å', '3 –¥–Ω—è')"""
        time_units = {
            '—Å–µ–∫': 'seconds',
            '–º–∏–Ω': 'minutes',
            '—á–∞—Å': 'hours',
            '–¥–µ–Ω—å': 'days',
            '–Ω–µ–¥–µ–ª': 'weeks'
        }

        parts = time_str.split()
        if len(parts) != 2:
            return timedelta(days=3)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        num, unit = parts
        num = int(num) if num.isdigit() else 3  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ

        for short, full in time_units.items():
            if unit.startswith(short):
                return timedelta(**{full: num})

        return timedelta(days=3)  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω

    async def ban_user(
        self,
        chat_id: int,
        user_id: int,
        duration: str = "3 –¥–Ω—è",
        reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    ) -> str:
        """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è"""
        try:
            delta = await self._parse_time(duration)
            until_date = datetime.now() + delta

            await self.bot.ban_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                until_date=until_date
            )

            # –ê–≤—Ç–æ—Ä–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
            if delta:
                async def auto_unban():
                    await asyncio.sleep(delta.total_seconds())
                    await self.bot.unban_chat_member(chat_id, user_id)
                asyncio.create_task(auto_unban())

            return (f"üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω\n"
                    f"‚è≥ –°—Ä–æ–∫: {duration}\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")

        except BadRequest as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞: {e}"

    async def unban_user(self, chat_id: int, user_id: int) -> str:
        """–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.bot.unban_chat_member(chat_id, user_id)
            return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω"
        except BadRequest as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: {e}"

    async def warn_user(self, user_id: int, duration: str = "3 –¥–Ω—è", reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞") -> str:
        """–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        delta = await self._parse_time(duration)
        return (f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
                f"‚è≥ –°—Ä–æ–∫: {duration}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")

    async def mute_user(
        self,
        chat_id: int,
        user_id: int,
        duration: str = "10 –º–∏–Ω—É—Ç",
        reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    ) -> str:
        """–ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–ø—Ä–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        try:
            delta = await self._parse_time(duration)
            until_date = datetime.now() + delta

            await self.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=types.ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False
                ),
                until_date=until_date
            )

            return (f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –º—É—Ç–µ\n"
                    f"‚è≥ –°—Ä–æ–∫: {duration}\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")

        except BadRequest as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –º—É—Ç–∞: {e}"

    async def unmute_user(self, chat_id: int, user_id: int) -> str:
        """–°–Ω—è—Ç—å –º—É—Ç"""
        try:
            await self.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=types.ChatPermissions.all()
            )
            return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–º—É—á–µ–Ω"
        except BadRequest as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –º—É—Ç–∞: {e}"
