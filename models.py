import random
from datetime import datetime

class BotModule:
    def __init__(self):
        self.notes = {}  # {user_id: [note1, note2]}
        self.duels = {}  # {chat_id: {"players": [user1, user2], "scores": {user1: 0, user2: 0}}}
        self.bot_info = {
            "language": "Python",
            "creator": "–í–∞—à–µ –∏–º—è",
            "version": "1.0",
            "creation_date": "2023-11-15",
            "features": ["–ó–∞–º–µ—Ç–∫–∏", "–î—É—ç–ª–∏", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"]
        }
    
    # ===== –°–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ—Ç–æ–∫ =====
    def add_note(self, user_id, note_text):
        if user_id not in self.notes:
            self.notes[user_id] = []
        self.notes[user_id].append({
            "text": note_text,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        return "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
    
    def get_notes(self, user_id):
        if user_id not in self.notes or not self.notes[user_id]:
            return "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫."
        
        notes_list = ["–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:"]
        for i, note in enumerate(self.notes[user_id], 1):
            notes_list.append(f"{i}. {note['text']} (—Å–æ–∑–¥–∞–Ω–æ: {note['date']})")
        
        return "\n".join(notes_list)
    
    def delete_note(self, user_id, note_index):
        if user_id not in self.notes:
            return "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        
        try:
            note_index = int(note_index) - 1
            if 0 <= note_index < len(self.notes[user_id]):
                deleted_note = self.notes[user_id].pop(note_index)
                return f"–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {deleted_note['text']}"
            else:
                return "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏."
        except ValueError:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ —Ü–∏—Ñ—Ä–æ–π."
    
    # ===== –°–∏—Å—Ç–µ–º–∞ –¥—É—ç–ª–µ–π =====
    def start_duel(self, chat_id, player1_id, player2_id):
        if chat_id in self.duels:
            return "–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –¥—É—ç–ª—å!"
        
        self.duels[chat_id] = {
            "players": [player1_id, player2_id],
            "scores": {player1_id: 0, player2_id: 0},
            "start_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return f"–î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å! –ò–≥—Ä–æ–∫ 1 vs –ò–≥—Ä–æ–∫ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /duel_attack –¥–ª—è –∞—Ç–∞–∫–∏!"
    
    def duel_attack(self, chat_id, attacker_id):
        if chat_id not in self.duels:
            return "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏."
        
        duel = self.duels[chat_id]
        if attacker_id not in duel["players"]:
            return "–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –¥—É—ç–ª–∏!"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –∞—Ç–∞–∫—É–µ—Ç, –∞ –∫—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
        players = duel["players"]
        defender_id = players[1] if attacker_id == players[0] else players[0]
        
        # –°–∏–º—É–ª—è—Ü–∏—è –∞—Ç–∞–∫–∏ (—Ä–∞–Ω–¥–æ–º–Ω—ã–π —É—Ä–æ–Ω 1-10)
        damage = random.randint(1, 10)
        duel["scores"][attacker_id] += damage
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É (–ø–µ—Ä–≤—ã–π –Ω–∞–±—Ä–∞–≤—à–∏–π 30 –æ—á–∫–æ–≤ –ø–æ–±–µ–∂–¥–∞–µ—Ç)
        if duel["scores"][attacker_id] >= 30:
            winner = attacker_id
            loser = defender_id
            del self.duels[chat_id]
            return (f"–ò–≥—Ä–æ–∫ {winner} –Ω–∞–Ω–µ—Å —Ä–µ—à–∞—é—â–∏–π —É–¥–∞—Ä ({damage} —É—Ä–æ–Ω–∞) –∏ –ø–æ–±–µ–∂–¥–∞–µ—Ç –≤ –¥—É—ç–ª–∏!\n"
                    f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {winner}: 30 vs {loser}: {duel['scores'][loser]}")
        
        return (f"–ò–≥—Ä–æ–∫ {attacker_id} –Ω–∞–Ω–æ—Å–∏—Ç —É–¥–∞—Ä ({damage} —É—Ä–æ–Ω–∞)!\n"
                f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {attacker_id}: {duel['scores'][attacker_id]} vs "
                f"{defender_id}: {duel['scores'][defender_id]}")
    
    def duel_status(self, chat_id):
        if chat_id not in self.duels:
            return "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏."
        
        duel = self.duels[chat_id]
        players = duel["players"]
        return (f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥—É—ç–ª–∏ (–Ω–∞—á–∞—Ç–∞ –≤ {duel['start_time']}):\n"
                f"{players[0]}: {duel['scores'][players[0]]} –æ—á–∫–æ–≤\n"
                f"{players[1]}: {duel['scores'][players[1]]} –æ—á–∫–æ–≤\n"
                f"–î–æ –ø–æ–±–µ–¥—ã –Ω—É–∂–Ω–æ {30 - max(duel['scores'].values())} –æ—á–∫–æ–≤.")
    
    # ===== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ =====
    def get_bot_info(self):
        info_lines = [f"ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:"]
        for key, value in self.bot_info.items():
            if isinstance(value, list):
                info_lines.append(f"{key.capitalize()}: {', '.join(value)}")
            else:
                info_lines.append(f"{key.capitalize()}: {value}")
        return "\n".join(info_lines)