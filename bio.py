from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import random

# –°—Ç–∞—Ç—å–∏ –£–ö
uk_articles = [
    {"number": 158, "title": "–ö—Ä–∞–∂–∞", "text": "–¢–∞–π–Ω–æ–µ —Ö–∏—â–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞."},
    {"number": 228, "title": "–ù–∞—Ä–∫–æ—Ç–∏–∫–∏", "text": "–•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤."},
    {"number": 105, "title": "–£–±–∏–π—Å—Ç–≤–æ", "text": "–£–º—ã—à–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏—á–∏–Ω–µ–Ω–∏–µ —Å–º–µ—Ä—Ç–∏."},
    {"number": 161, "title": "–ì—Ä–∞–±—ë–∂", "text": "–û—Ç–∫—Ä—ã—Ç–æ–µ —Ö–∏—â–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞."},
    {"number": 163, "title": "–í—ã–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "text": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π."}
]

# –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≥—Ä–∞–¥—ã
DIFFICULTY = {
    "easy": {"label": "üü¢ Easy", "exp": 1000, "money": 500},
    "normal": {"label": "üü° Normal", "exp": 3000, "money": 1000},
    "hard": {"label": "üî¥ Hard", "exp": 7000, "money": 3000},
    "dark": {"label": "ü©∏ DARK RED", "exp": 25000, "money": 10000}
}

# –ò–≥—Ä–æ–∫–∏
players = {}

# –°—Ü–µ–Ω—ã (—Ç–µ –∂–µ –¥–ª—è –≤—Å–µ—Ö, –ø—Ä–∏–∑ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
scenes = {
    1: {
        "text": "üëÆ –û—Ö—Ä–∞–Ω–Ω–∏–∫ –∑–∞—Å–Ω—É–ª —É –∫–∞–º–µ—Ä—ã. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?\n1Ô∏è‚É£ –ü–æ–±–µ–∂–∞—Ç—å\n2Ô∏è‚É£ –£–∫—Ä–∞—Å—Ç—å –∫–ª—é—á\n3Ô∏è‚É£ –ñ–¥–∞—Ç—å",
        "choices": {"1": 2, "2": 3, "3": 4}
    },
    2: {
        "text": "üö® –¢—ã –≤—ã–±–µ–∂–∞–ª, –Ω–æ –Ω–∞—Ç–∫–Ω—É–ª—Å—è –Ω–∞ –æ—Ö—Ä–∞–Ω—É.\n1Ô∏è‚É£ –£–¥–∞—Ä–∏—Ç—å\n2Ô∏è‚É£ –°–ø—Ä—è—Ç–∞—Ç—å—Å—è",
        "choices": {"1": "caught", "2": 5}
    },
    3: {
        "text": "üóù –£ —Ç–µ–±—è –∫–ª—é—á! –ß—Ç–æ –¥–∞–ª—å—à–µ?\n1Ô∏è‚É£ –û—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å\n2Ô∏è‚É£ –°–ø—Ä—è—Ç–∞—Ç—å –∫–ª—é—á",
        "choices": {"1": 5, "2": 4}
    },
    4: {
        "text": "‚è≥ –¢—ã –∂–¥–∞–ª —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. –ü–µ—Ä–µ–≤–µ–ª–∏ –≤ –∫–∞—Ä—Ü–µ—Ä. –ö–æ–Ω–µ—Ü.",
        "choices": {}
    },
    5: {
        "text": "üèÉ‚Äç‚ôÇÔ∏è –ü–æ–±–µ–≥ —É–¥–∞–ª—Å—è! –¢—ã –Ω–∞ —Å–≤–æ–±–æ–¥–µ!",
        "choices": {}
    },
    "caught": {
        "text": "üîí –¢–µ–±—è –ø–æ–π–º–∞–ª–∏. –ü–æ–±–µ–≥ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è.",
        "choices": {}
    }
}

# –ö–æ–º–∞–Ω–¥–∞ /–ø–æ–±–µ–≥
async def show_difficulty(message: types.Message):
    kb = InlineKeyboardMarkup()
    for key, data in DIFFICULTY.items():
        kb.add(InlineKeyboardButton(data["label"], callback_data=f"pb_start_{key}"))
    await message.answer("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=kb)

# –ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
async def start_game_callback(call: CallbackQuery):
    uid = call.from_user.id
    diff_key = call.data.split("_")[-1]
    diff_data = DIFFICULTY.get(diff_key)

    if not diff_data:
        await call.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞.")
        return

    article = random.choice(uk_articles)
    players[uid] = {
        "article": article,
        "scene": 1,
        "difficulty": diff_key
    }

    await call.message.edit_text(
        f"üìú –°—Ç–∞—Ç—å—è: {article['number']} ‚Äî {article['title']}\n"
        f"{article['text']}\n\n"
        f"üß± –£—Ä–æ–≤–µ–Ω—å: {diff_data['label']}\n\n"
        f"{scenes[1]['text']}"
    )

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã
async def continue_game(message: types.Message):
    uid = message.from_user.id
    if uid not in players:
        return

    choice = message.text.strip()
    player = players[uid]
    current = player["scene"]
    scene = scenes.get(current)

    if not scene or choice not in scene["choices"]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ù–∞–ø–∏—à–∏: 1, 2 –∏–ª–∏ 3.")
        return

    next_scene = scene["choices"][choice]
    if isinstance(next_scene, str):  # "caught"
        reward = DIFFICULTY[player["difficulty"]]
        await message.answer(
            f"{scenes[next_scene]['text']}\n\n"
            f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: 0 –æ–ø—ã—Ç–∞, 0 –º–æ–Ω–µ—Ç"
        )
        del players[uid]
        return

    next_text = scenes[next_scene]["text"]
    player["scene"] = next_scene
    if not scenes[next_scene]["choices"]:
        reward = DIFFICULTY[player["difficulty"]]
        success = (next_scene == 5)
        result = next_text
        if success:
            result += f"\n\nüéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward['exp']} –æ–ø—ã—Ç–∞, {reward['money']} –º–æ–Ω–µ—Ç"
        else:
            result += f"\n\nüéÅ –ù–∞–≥—Ä–∞–¥–∞: 500 –æ–ø—ã—Ç–∞ (–º–æ—Ä–∞–ª—å), 0 –º–æ–Ω–µ—Ç"
        await message.answer(result)
        del players[uid]
    else:
        await message.answer(next_text)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(show_difficulty, lambda m: m.text.lower() == "–ø–æ–±–µ–≥")
    dp.register_callback_query_handler(start_game_callback, lambda c: c.data.startswith("pb_start_"))
    dp.register_message_handler(continue_game, lambda m: m.from_user.id in players and m.text.isdigit())
