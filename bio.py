from aiogram import types, Dispatcher from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery from commands.db import cursor, conn from assets.transform import transform_int as tr import random

uk_articles = [ {"number": 158, "title": "–ö—Ä–∞–∂–∞", "text": "–¢–∞–π–Ω–æ–µ —Ö–∏—â–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞."}, {"number": 228, "title": "–ù–∞—Ä–∫–æ—Ç–∏–∫–∏", "text": "–•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤."}, {"number": 105, "title": "–£–±–∏–π—Å—Ç–≤–æ", "text": "–£–º—ã—à–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏—á–∏–Ω–µ–Ω–∏–µ —Å–º–µ—Ä—Ç–∏."}, {"number": 161, "title": "–ì—Ä–∞–±—ë–∂", "text": "–û—Ç–∫—Ä—ã—Ç–æ–µ —Ö–∏—â–µ–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞."}, {"number": 163, "title": "–í—ã–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "text": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π."} ]

DIFFICULTY = { "easy":    {"label": "üü¢ Easy",    "exp": 1000,  "money": 500,   "fail": 0.1}, "normal":  {"label": "üü° Normal",  "exp": 3000,  "money": 1000,  "fail": 0.25}, "medium":  {"label": "üü† Medium",  "exp": 5000,  "money": 2000,  "fail": 0.4}, "hard":    {"label": "üî¥ Hard",    "exp": 7000,  "money": 3000,  "fail": 0.6}, "brutal":  {"label": "‚ö´Ô∏è Brutal",  "exp": 10000, "money": 5000,  "fail": 0.8}, "dark":    {"label": "ü©∏ DARK RED", "exp": 25000, "money": 10000, "fail": 0.93} }

players = {}

STAGES = { 1: [("üîì –í—Å–∫—Ä—ã—Ç—å –∑–∞–º–æ–∫ –∏ –≤—ã–π—Ç–∏", 2), ("üßç –ü–æ–¥–æ–∂–¥–∞—Ç—å –∏ –Ω–∞–±–ª—é–¥–∞—Ç—å", 3), ("üëä –ù–∞–ø–∞—Å—Ç—å –Ω–∞ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞", "fail")], 2: [("üö™ –í—ã–π—Ç–∏ –≤ –∫–æ—Ä–∏–¥–æ—Ä", 4), ("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É", "fail"), ("üî¶ –°–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–≤–∞–ª", 5)], 3: [("üí§ –û—Ö—Ä–∞–Ω–Ω–∏–∫ —É—Å–Ω—É–ª ‚Äî –≤—ã–π—Ç–∏!", 2), ("ü™ü –í—ã–ª–µ–∑—Ç–∏ —á–µ—Ä–µ–∑ –æ–∫–Ω–æ", 5), ("üîä –ü–æ–¥–Ω—è—Ç—å —Ç—Ä–µ–≤–æ–≥—É", "fail")], 4: [("üèÉ‚Äç‚ôÇ –ü—Ä–æ–±–µ–∂–∞—Ç—å –º–∏–º–æ –∫–∞–º–µ—Ä—ã", 6), ("üîê –í—Å–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å —Å –∫–æ–¥–æ–º", "fail"), ("üßç –ü—Ä—è—Ç–∞—Ç—å—Å—è –ø–æ–¥ –Ω–æ—Å–∏–ª–∫–∞–º–∏", 6)], 5: [("üîã –í–∑–ª–æ–º–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫—É—é –¥–≤–µ—Ä—å", 6), ("üß± –ü—Ä–æ–ª–æ–º–∏—Ç—å —Å—Ç–µ–Ω—É", "fail"), ("üß¥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Å–ª–æ –∏ –æ—Ç–∫—Ä—ã—Ç—å –ª—é–∫", 6)], 6: [("üõ• –£–±–µ–∂–∞—Ç—å –Ω–∞ –ª–æ–¥–∫–µ", "win"), ("üöÅ –ó–∞—Ö–≤–∞—Ç–∏—Ç—å –≤–µ—Ä—Ç–æ–ª—ë—Ç", "win"), ("üöô –£–≥–Ω–∞—Ç—å –º–∞—à–∏–Ω—É", "win"), ("üö∂ –ü–æ–±–µ–∂–∞—Ç—å –≤ –ª–µ—Å", "fail")] }

def next_stage_kb(uid): stage = players[uid]["stage"] kb = InlineKeyboardMarkup() for i, (label, ) in enumerate(STAGES.get(stage, []), 1): kb.add(InlineKeyboardButton(f"{i}. {label}", callback_data=f"prison_step{stage}_{i}")) return kb

async def start_escape(message: types.Message): kb = InlineKeyboardMarkup() for key, data in DIFFICULTY.items(): kb.add(InlineKeyboardButton(data["label"], callback_data=f"prison_start_{key}")) await message.answer("üèö –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–±–µ–≥–∞:", reply_markup=kb)

async def choose_difficulty(call: CallbackQuery): uid = call.from_user.id diff = call.data.split("_")[-1] article = random.choice(uk_articles) players[uid] = { "article": article, "difficulty": diff, "stage": 1 } await call.message.edit_text( f"üìú –°—Ç–∞—Ç—å—è {article['number']} ‚Äî {article['title']} " f"{article['text']}

üîê –ü–æ–±–µ–≥ –Ω–∞—á–∞–ª—Å—è... –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É:", reply_markup=next_stage_kb(uid) )

async def process_step(call: CallbackQuery): uid = call.from_user.id data = call.data.split("_") if len(data) < 4: return await call.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.") stage = int(data[2]) index = int(data[3]) - 1 await handle_step(uid, call.message, stage, index, is_button=True)

async def process_step_text(message: types.Message): uid = message.from_user.id if uid not in players: return if not message.text.strip().isdigit(): return index = int(message.text.strip()) - 1 stage = players[uid]["stage"] await handle_step(uid, message, stage, index, is_button=False)

async def handle_step(uid, target, stage, index, is_button=True): try: if uid not in players or players[uid]["stage"] != stage: if is_button: await target.answer("‚õî –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ö–æ–¥.") return

actions = STAGES.get(stage)
    if not actions or index >= len(actions):
        if is_button:
            await target.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    label, result = actions[index]
    fail_chance = DIFFICULTY[players[uid]["difficulty"]]["fail"]

    if result == "fail" or random.random() < fail_chance:
        cursor.execute("UPDATE users SET escape_fails = escape_fails + 1 WHERE user_id = ?", (uid,))
        conn.commit()
        msg = "üö® –í–∞—Å –ø–æ–π–º–∞–ª–∏. –ü–æ–±–µ–≥ –ø—Ä–æ–≤–∞–ª–µ–Ω."
        del players[uid]
        return await target.edit_text(msg) if is_button else await target.reply(msg)

    if result == "win":
        diff = players[uid]["difficulty"]
        prize = DIFFICULTY[diff]
        cursor.execute("UPDATE users SET balance = balance + ?, exp = exp + ?, escape_wins = escape_wins + 1 WHERE user_id = ?",
                       (prize["money"], prize["exp"], uid))
        conn.commit()
        msg = f"üö™ –¢—ã —Å–±–µ–∂–∞–ª!\nüéÅ +{tr(prize['money'])} –º–æ–Ω–µ—Ç, +{tr(prize['exp'])} –æ–ø—ã—Ç–∞"
        del players[uid]
        return await target.edit_text(msg) if is_button else await target.reply(msg)

    players[uid]["stage"] = result
    msg = f"üîÑ –≠—Ç–∞–ø {result} ‚Äî –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ 1, 2, 3):"
    return await target.edit_text(msg, reply_markup=next_stage_kb(uid)) if is_button else await target.reply(msg, reply_markup=next_stage_kb(uid))

except Exception as e:
    print(f"[ERROR] –ü–æ–±–µ–≥: {e}")
    return await target.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.") if is_button else await target.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

async def my_escape_stats(message: types.Message): uid = message.from_user.id cursor.execute("SELECT escape_wins, escape_fails FROM users WHERE user_id = ?", (uid,)) row = cursor.fetchone() if row: wins, fails = row await message.answer(f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–≥–æ–≤:\n‚úÖ –ü–æ–±–µ–≥–æ–≤: {wins}\n‚ùå –ü—Ä–æ–≤–∞–ª–æ–≤: {fails}")

async def top_escapers(message: types.Message): cursor.execute("SELECT user_id, escape_wins FROM users WHERE escape_wins > 0 ORDER BY escape_wins DESC LIMIT 5") rows = cursor.fetchall() results = [] for i, (uid, wins) in enumerate(rows, 1): try: user = await message.bot.get_chat(uid) name = user.first_name or user.username or f"ID {uid}" medal = "üèÖ" if wins >= 50 else "ü•à" if wins >= 25 else "ü•â" if wins >= 10 else "" link = f"<a href='tg://user?id={uid}'>{medal} {name}</a> ‚Äî {wins} –ø–æ–±–µ–¥" results.append(link) except: results.append(f"{i}. ID {uid} ‚Äî {wins} –ø–æ–±–µ–¥") await message.answer("üèÜ –¢–æ–ø –ø–æ–±–µ–≥–æ–≤:\n" + "\n".join(results), parse_mode="HTML")

def register_handlers(dp: Dispatcher): dp.register_message_handler(start_escape, lambda m: m.text.lower() == "–ø–æ–±–µ–≥") dp.register_callback_query_handler(choose_difficulty, lambda c: c.data.startswith("prison_start_")) dp.register_callback_query_handler(process_step, lambda c: c.data.startswith("prison_step_")) dp.register_message_handler(process_step_text, lambda m: m.from_user.id in players and m.text.isdigit()) dp.register_message_handler(my_escape_stats, lambda m: m.text.lower() == "–º–æ–π –ø–æ–±–µ–≥") dp.register_message_handler(top_escapers, lambda m: m.text.lower() == "—Ç–æ–ø –ø–æ–±–µ–≥–æ–≤")

