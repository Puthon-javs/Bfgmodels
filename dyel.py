from aiogram import Dispatcher, types
from decimal import Decimal
from commands.db import conn as conngdb, cursor as cursorgdb
from assets.antispam import antispam, antispam_earning, new_earning_msg
from commands.main import win_luser
from assets.transform import transform_int as tr
import random

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥—É—ç–ª–∏
@antispam
async def duel_start(message: types.Message):
    user_id = message.from_user.id
    opponent_id = message.reply_to_message.from_user.id if message.reply_to_message else None

    if not opponent_id:
        await message.answer("–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å!")
        return

    if opponent_id == user_id:
        await message.answer("–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Å–µ–±—è!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    initiator_balance = cursorgdb.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)).fetchone()
    if not initiator_balance or Decimal(initiator_balance[0]) < 100:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–º–∏–Ω–∏–º—É–º 100 B-coins)!")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥—É—ç–ª–∏
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å", callback_data=f"duel_accept|{user_id}|{opponent_id}"),
        types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"duel_decline|{user_id}|{opponent_id}")
    )

    msg = await message.answer(
        f"üéØ {message.from_user.get_mention()} –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—É—ç–ª—å {message.reply_to_message.from_user.get_mention()}!\n"
        f"–°—Ç–∞–≤–∫–∞: 100 B-coins\n"
        f"–£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤!",
        reply_markup=keyboard
    )
    await new_earning_msg(msg.chat.id, msg.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏
@antispam_earning
async def duel_accept(call: types.CallbackQuery):
    data = call.data.split('|')
    initiator_id = int(data[1])
    opponent_id = int(data[2])
    current_user = call.from_user.id

    if current_user != opponent_id:
        await call.answer("–≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    opponent_balance = cursorgdb.execute('SELECT balance FROM users WHERE user_id = ?', (opponent_id,)).fetchone()
    if not opponent_balance or Decimal(opponent_balance[0]) < 100:
        await call.message.edit_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥—É—ç–ª–∏!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    initiator_balance = cursorgdb.execute('SELECT balance FROM users WHERE user_id = ?', (initiator_id,)).fetchone()
    if not initiator_balance or Decimal(initiator_balance[0]) < 100:
        await call.message.edit_text("–£ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –¥—É—ç–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return

    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫–∏
    cursorgdb.execute('UPDATE users SET balance = balance - 100 WHERE user_id IN (?, ?)', (initiator_id, opponent_id))
    conngdb.commit()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    winner_id = random.choice([initiator_id, opponent_id])
    loser_id = opponent_id if winner_id == initiator_id else initiator_id

    # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    cursorgdb.execute('UPDATE users SET balance = balance + 200 WHERE user_id = ?', (winner_id,))
    conngdb.commit()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
    winner_balance = cursorgdb.execute('SELECT balance FROM users WHERE user_id = ?', (winner_id,)).fetchone()[0]
    loser_balance = cursorgdb.execute('SELECT balance FROM users WHERE user_id = ?', (loser_id,)).fetchone()[0]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    win_emoji, lose_emoji = await win_luser()
    await call.message.edit_text(
        f"{win_emoji} –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {call.from_user.get_mention() if winner_id == current_user else f'user_{winner_id}'}\n"
        f"–í—ã–∏–≥—Ä—ã—à: 200 B-coins (100 + 100)\n\n"
        f"–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –¥—É—ç–ª–∏:\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {tr(Decimal(winner_balance))} B-coins\n"
        f"–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: {tr(Decimal(loser_balance))} B-coins",
        reply_markup=None
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç –¥—É—ç–ª–∏
@antispam_earning
async def duel_decline(call: types.CallbackQuery):
    data = call.data.split('|')
    opponent_id = int(data[2])
    current_user = call.from_user.id

    if current_user != opponent_id:
        await call.answer("–≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        return

    await call.message.edit_text(
        f"üòê {call.from_user.get_mention()} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –¥—É—ç–ª–∏!",
        reply_markup=None
    )

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(duel_start, lambda message: message.text.lower().startswith('–¥—É—ç–ª—å'))
    dp.register_callback_query_handler(duel_accept, text_startswith='duel_accept')
    dp.register_callback_query_handler(duel_decline, text_startswith='duel_decline')

# –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è
MODULE_DESCRIPTION = {
    'name': 'üéØ –î—É—ç–ª—å',
    'description': (
        "–ò–≥—Ä–∞ '–î—É—ç–ª—å' –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n"
        "1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π '–¥—É—ç–ª—å'\n"
        "2. –û–ø–ø–æ–Ω–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤\n"
        "3. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 200 B-coins (100 –æ—Ç –∫–∞–∂–¥–æ–≥–æ)\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 100 B-coins"
    )
}