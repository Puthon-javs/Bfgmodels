from aiogram import Dispatcher, types
import logging
from typing import Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    from commands.main import win_luser
    from assets.antispam import antispam
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    raise

@antispam
async def hello(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    try:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ hello: {e}")

@antispam
async def send_random_emoji(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–º–æ–¥–∑–∏"""
    try:
        result: Tuple[str, str] = await win_luser()
        if not isinstance(result, tuple) or len(result) != 2:
            raise ValueError("–§—É–Ω–∫—Ü–∏—è win_luser –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫")
            
        win, lose = result
        await message.answer(f"{win} {lose}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_random_emoji: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏")

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    try:
        dp.register_message_handler(hello, lambda message: message.text and message.text.lower() == '–ø—Ä–∏–≤–µ—Ç')
        dp.register_message_handler(send_random_emoji, commands=['emj'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        raise

MODULE_DESCRIPTION = {
    'name': 'üòä –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≠–º–æ–¥–∂–∏',
    'description': '–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–ª–æ–≤–æ "–ø—Ä–∏–≤–µ—Ç" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —ç–º–æ–¥–∂–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /emj'
}
