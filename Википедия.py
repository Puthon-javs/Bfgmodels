from aiogram import types, Dispatcher
import wikipedia

wikipedia.set_lang("ru")

async def wiki_handler(message: types.Message):
    text = message.text.strip()

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥ /–≤–∏–∫–∏–ø–µ–¥–∏—è –∏ –ø—Ä–æ—Å—Ç–æ "–≤–∏–∫–∏–ø–µ–¥–∏—è ..."
    if text.lower().startswith("/–≤–∏–∫–∏–ø–µ–¥–∏—è") or text.lower().startswith("–≤–∏–∫–∏–ø–µ–¥–∏—è"):
        parts = text.split(" ", 1)

        if len(parts) < 2:
            await message.reply("‚ùå –£–∫–∞–∂–∏, —á—Ç–æ –∏—Å–∫–∞—Ç—å. –ü—Ä–∏–º–µ—Ä:\n/–≤–∏–∫–∏–ø–µ–¥–∏—è Python")
            return

        query = parts[1].strip()

        try:
            summary = wikipedia.summary(query, sentences=5)
            page = wikipedia.page(query)
            title = page.title

            # –§–æ—Ä–º–∞—Ç: python-–±–ª–æ–∫
            response = f"*üîç {title}*\n```python\n{summary}\n```"
            await message.reply(response, parse_mode="Markdown")

        except wikipedia.exceptions.DisambiguationError as e:
            options = "\n".join(e.options[:5])
            await message.reply(
                f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π. –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:\n```\n{options}\n```",
                parse_mode="Markdown"
            )

        except wikipedia.exceptions.PageError:
            await message.reply("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É.")

        except Exception as e:
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: `{e}`", parse_mode="Markdown")

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(wiki_handler, lambda msg: msg.text.lower().startswith("–≤–∏–∫–∏–ø–µ–¥–∏—è "))
    dp.register_message_handler(wiki_handler, commands=['–≤–∏–∫–∏–ø–µ–¥–∏—è'])
