from aiogram import types, Dispatcher
import wikipedia
import re

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
wikipedia.set_lang("ru")

def escape_md(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    """
    return re.sub(r'([_*ÓÄÅÓÄÅ()~`>#+=|{}.!\\-])', r'\\\1', text)

async def wikipedia_handler(message: types.Message):
    text = message.text.strip()

    if text.startswith("/–≤–∏–∫–∏–ø–µ–¥–∏—è") or text.lower().startswith("–≤–∏–∫–∏–ø–µ–¥–∏—è "):
        parts = text.split(" ", 1)
        if len(parts) < 2:
            await message.reply("‚ùó –£–∫–∞–∂–∏, —á—Ç–æ –∏—Å–∫–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: `/–≤–∏–∫–∏–ø–µ–¥–∏—è Python`", parse_mode="MarkdownV2")
            return

        query = parts[1]

        try:
            # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏
            page = wikipedia.page(query)
            summary = wikipedia.summary(query, sentences=5)

            title = escape_md(page.title)
            content = escape_md(summary)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"üîç *{title}*\n```java\n{content}\n```"
            await message.reply(response, parse_mode="MarkdownV2")

        except wikipedia.exceptions.DisambiguationError as e:
            options = "\n".join([escape_md(opt) for opt in e.options[:5]])
            await message.reply(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π, —É—Ç–æ—á–Ω–∏:\n```{options}```", parse_mode="MarkdownV2")

        except wikipedia.exceptions.PageError:
            await message.reply("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="MarkdownV2")

        except Exception as e:
            error = escape_md(str(e))
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞:\n```{error}```", parse_mode="MarkdownV2")


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(wikipedia_handler, lambda msg: msg.text.lower().startswith("–≤–∏–∫–∏–ø–µ–¥–∏—è"))
    dp.register_message_handler(wikipedia_handler, commands=["–≤–∏–∫–∏–ø–µ–¥–∏—è"])
