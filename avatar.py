import os
import sqlite3
import logging
from pathlib import Path
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ContentType

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ)
from assets.antispam import antispam, admin_only
from assets.transform import transform_int as tr
from bot import bot
from commands.help import CONFIG
from user import BFGuser, BFGconst

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
BASE_DIR = Path(__file__).parent.parent
AVATARS_DIR = BASE_DIR / 'modules' / 'temp' / 'avatars'
DB_PATH = BASE_DIR / 'modules' / 'temp' / 'avatar.db'

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
AVATARS_DIR.mkdir(parents=True, exist_ok=True)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –ø–æ–º–æ—â—å
CONFIG['help_osn'] += '\n   üñº –ê–≤–∞—Ç–∞—Ä–∫–∞ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä'

# --- –°–û–°–¢–û–Ø–ù–ò–Ø FSM ---
class SetAvaState(StatesGroup):
    avatar = State()

# --- –ë–ê–ó–ê –î–ê–ù–ù–´–• ---
class AvatarDatabase:
    def __init__(self):
        self.conn = sqlite3.connect(DB_PATH)
        self._create_tables()
    
    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        with self.conn:
            self.conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    action INTEGER DEFAULT 0
                )''')
            self.conn.execute('''
                CREATE TABLE IF NOT EXISTS settings (
                    id INTEGER PRIMARY KEY DEFAULT 1,
                    chat_id INTEGER DEFAULT 0
                )''')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if not self.conn.execute('SELECT 1 FROM settings').fetchone():
                self.conn.execute('INSERT INTO settings (id, chat_id) VALUES (1, 0)')
    
    async def get_moderation_chat(self):
        """–ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            return self.conn.execute('SELECT chat_id FROM settings WHERE id = 1').fetchone()[0]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            return 0
    
    async def set_moderation_chat(self, chat_id):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            with self.conn:
                self.conn.execute('UPDATE settings SET chat_id = ? WHERE id = 1', (chat_id,))
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    async def get_avatar_status(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∫–∏ (None - –Ω–µ—Ç, 0 - –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, 1 - –æ–¥–æ–±—Ä–µ–Ω–æ)"""
        try:
            result = self.conn.execute(
                'SELECT action FROM users WHERE user_id = ?', 
                (user_id,)
            ).fetchone()
            return result[0] if result else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
            return None
    
    async def add_for_moderation(self, user_id):
        """–î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
        try:
            with self.conn:
                self.conn.execute(
                    'INSERT OR REPLACE INTO users (user_id, action) VALUES (?, 0)',
                    (user_id,)
                )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
            return False
    
    async def update_status(self, user_id, status):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤–∞—Ç–∞—Ä–∫–∏ (1 - –æ–¥–æ–±—Ä–µ–Ω–æ, 0 - –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ)"""
        try:
            with self.conn:
                if status == 1:
                    self.conn.execute(
                        'UPDATE users SET action = 1 WHERE user_id = ?',
                        (user_id,)
                    )
                else:
                    self.conn.execute(
                        'DELETE FROM users WHERE user_id = ?',
                        (user_id,)
                    )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
        self.conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = AvatarDatabase()

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_avatar_kb(user_id, has_avatar):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–æ–π"""
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text='‚ùå –£–¥–∞–ª–∏—Ç—å' if has_avatar else 'üñº –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
            callback_data=f"avatar_toggle|{user_id}"
        )
    )

def get_cancel_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="avatar_cancel")
    )

def get_moderation_kb(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    return InlineKeyboardMarkup().row(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"avatar_approve|{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"avatar_reject|{user_id}")
    )

# --- –ö–û–ú–ê–ù–î–´ ---
@antispam
async def balance_cmd(message: types.Message, user: BFGuser):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–æ–π"""
    avatar_status = await db.get_avatar_status(user.id)
    
    balance_text = f'''üë´ –ù–∏–∫: {user.name}
üí∞ –î–µ–Ω—å–≥–∏: {user.balance.tr()}$
üí¥ –ô–µ–Ω—ã: {user.yen.tr()}¬•
üè¶ –ë–∞–Ω–∫: {user.bank.tr()}$
üíΩ –ë–∏—Ç–∫–æ–∏–Ω—ã: {user.btc.tr()}üåê

{BFGconst.ads}'''
    
    if avatar_status == 1:
        avatar_path = AVATARS_DIR / f"{user.id}.png"
        try:
            with open(avatar_path, 'rb') as avatar_file:
                await message.answer_photo(
                    photo=avatar_file,
                    caption=balance_text,
                    reply_markup=get_avatar_kb(user.id, True)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
            await db.update_status(user.id, 0)
            await message.answer(balance_text, disable_web_page_preview=True)
    else:
        await message.answer(
            balance_text,
            disable_web_page_preview=True,
            reply_markup=get_avatar_kb(user.id, False)
        )

@antispam
async def profile_cmd(message: types.Message, user: BFGuser):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π"""
    avatar_status = await db.get_avatar_status(user.id)
    
    profile_text = f'''üë§ –ü—Ä–æ—Ñ–∏–ª—å {user.name}:
ü™™ ID: {user.id}
üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance.tr()}$
üí¥ –ô–µ–Ω—ã: {user.yen.tr()}¬•
üè¶ –í –±–∞–Ω–∫–µ: {user.bank.tr()}$
üíΩ –ë–∏—Ç–∫–æ–∏–Ω—ã: {user.btc.tr()}üåê
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {user.energy.tr()}
üèÖ –†–µ–π—Ç–∏–Ω–≥: {user.rating.tr()}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.reg_date}

{BFGconst.ads}'''
    
    if avatar_status == 1:
        avatar_path = AVATARS_DIR / f"{user.id}.png"
        try:
            with open(avatar_path, 'rb') as avatar_file:
                await message.answer_photo(
                    photo=avatar_file,
                    caption=profile_text,
                    reply_markup=get_avatar_kb(user.id, True)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
            await db.update_status(user.id, 0)
            await message.answer(profile_text, disable_web_page_preview=True)
    else:
        await message.answer(
            profile_text,
            disable_web_page_preview=True,
            reply_markup=get_avatar_kb(user.id, False)
        )

@antispam
async def avatar_cmd(message: types.Message, user: BFGuser):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–æ–π"""
    avatar_status = await db.get_avatar_status(user.id)
    
    if avatar_status == 1:
        avatar_path = AVATARS_DIR / f"{user.id}.png"
        try:
            with open(avatar_path, 'rb') as avatar_file:
                await message.answer_photo(
                    photo=avatar_file,
                    caption=f"üñº {user.name}, –≤–∞—à–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞",
                    reply_markup=get_avatar_kb(user.id, True)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
            await db.update_status(user.id, 0)
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É")
    else:
        status_text = "üñº –£ –≤–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏" if avatar_status is None else "üîÑ –ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"
        await message.answer(
            status_text,
            reply_markup=get_avatar_kb(user.id, False)
        )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
async def toggle_avatar(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–æ–π"""
    user_id = call.from_user.id
    target_id = int(call.data.split('|')[1])
    
    if user_id != target_id:
        return await call.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞!", show_alert=True)
    
    avatar_status = await db.get_avatar_status(user_id)
    
    if avatar_status == 1:  # –£–¥–∞–ª–µ–Ω–∏–µ
        avatar_path = AVATARS_DIR / f"{user_id}.png"
        if avatar_path.exists():
            avatar_path.unlink()
        await db.update_status(user_id, 0)
        await call.message.edit_caption("üóë –ê–≤–∞—Ç–∞—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π
        if avatar_status == 0:
            return await call.answer("üîÑ –í–∞—à–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ!", show_alert=True)
        
        await call.message.edit_text(
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏:",
            reply_markup=get_cancel_kb())
        await SetAvaState.avatar.set()

async def cancel_avatar(call: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏"""
    await state.finish()
    await call.message.delete()

async def process_avatar(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏"""
    user_id = message.from_user.id
    mod_chat = await db.get_moderation_chat()
    
    if not mod_chat:
        await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        await state.finish()
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        avatar_path = AVATARS_DIR / f"{user_id}.png"
        await message.photo[-1].download(destination_file=avatar_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        with open(avatar_path, 'rb') as avatar_file:
            await bot.send_photo(
                chat_id=mod_chat,
                photo=avatar_file,
                caption=f"üñº –ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ –æ—Ç {user_id}",
                reply_markup=get_moderation_kb(user_id))
        
        await db.add_for_moderation(user_id)
        await message.answer("‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    finally:
        await state.finish()

@admin_only
async def set_mod_chat(message: types.Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    chat_id = message.chat.id
    if await db.set_moderation_chat(chat_id):
        await message.answer(f"‚úÖ –ß–∞—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {chat_id}")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

async def moderate_avatar(call: types.CallbackQuery):
    """–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–æ–∫"""
    action, user_id = call.data.split('|')
    user_id = int(user_id)
    
    if 'approve' in action:
        await db.update_status(user_id, 1)
        text = f"‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ {user_id} –æ–¥–æ–±—Ä–µ–Ω–∞"
    else:
        avatar_path = AVATARS_DIR / f"{user_id}.png"
        if avatar_path.exists():
            avatar_path.unlink()
        await db.update_status(user_id, 0)
        text = f"‚ùå –ê–≤–∞—Ç–∞—Ä–∫–∞ {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    
    await call.message.edit_caption(text)

# --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ---
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(balance_cmd, lambda m: m.text.lower() in ['–±', '–±–∞–ª–∞–Ω—Å', 'balance'])
    dp.register_message_handler(profile_cmd, lambda m: m.text.lower() in ['–ø—Ä–æ—Ñ–∏–ª—å', '–ø', 'profile'])
    dp.register_message_handler(avatar_cmd, lambda m: m.text.lower() in ['–∞–≤–∞', '–∞–≤–∞—Ç–∞—Ä–∫–∞', 'avatar'])
    dp.register_callback_query_handler(toggle_avatar, text_startswith='avatar_toggle')
    dp.register_callback_query_handler(cancel_avatar, text='avatar_cancel', state=SetAvaState.avatar)
    dp.register_message_handler(process_avatar, content_types=ContentType.PHOTO, state=SetAvaState.avatar)
    dp.register_message_handler(set_mod_chat, commands=['set_avatar_chat'])
    dp.register_callback_query_handler(moderate_avatar, text_startswith='avatar_')

MODULE_DESCRIPTION = {
    'name': 'üñº –ê–≤–∞—Ç–∞—Ä–∫–∏',
    'description': (
        "–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ –∞–≤–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–æ–π\n"
        "‚Ä¢ –±–∞–ª–∞–Ω—Å - –ø—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞\n"
        "‚Ä¢ –ø—Ä–æ—Ñ–∏–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "–î–ª—è –∞–¥–º–∏–Ω–æ–≤:\n"
        "/set_avatar_chat - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
    )
}

# –ó–∞–∫—Ä—ã—Ç–∏–µ –ë–î –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
def shutdown():
    db.close()