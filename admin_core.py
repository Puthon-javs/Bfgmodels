# -- coding: utf-8 --

from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.types import Message
import json, time, os, random

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
OWNER_ID = 8174117949
OWNER_USERNAME = "@NEWADA_Night"
DATABASE_PATH = "admin_module_db.json"

# === –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï –ë–î ===
def load_db():
    if os.path.exists(DATABASE_PATH):
        with open(DATABASE_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"admins": [], "zga": [], "reports": [], "balance": {}, "ranks": {}, "admin_chat": None}

def save_db():
    with open(DATABASE_PATH, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

# === –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
db = load_db()
cooldowns = {}

# === –•–≠–õ–ü–ï–†–´ ===
def is_admin(user_id):
    return user_id in db["admins"] or user_id in db["zga"] or user_id == OWNER_ID

def send_report(text):
    target = db.get("admin_chat") or OWNER_ID
    return [types.Message.to_object({'chat': {'id': target}, 'text': text})]

# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–û–ú–ê–ù–î ===
def register_handlers(dp: Dispatcher):

    @dp.message_handler(commands=['–º–æ–π', '–º–æ–π id'])
    async def my_id(msg: Message):
        if 'id' in msg.text:
            await msg.reply(f"üßæ –¢–≤–æ–π Telegram ID: {msg.from_user.id}")

    @dp.message_handler(lambda m: m.text and m.text.lower().startswith("—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω —á–∞—Ç"))
    async def set_admin_chat(msg: Message):
        if msg.from_user.id != OWNER_ID:
            return
        db["admin_chat"] = msg.chat.id
        save_db()
        await msg.reply("‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω-—Ü–µ–Ω—Ç—Ä.")

    @dp.message_handler(lambda m: m.text and m.text.lower() == "–∞–¥–º–∏–Ω—ã")
    async def list_admins(msg: Message):
        admins = "\n".join([f"üëÆ {aid}" for aid in db["admins"]])
        zga = "\n".join([f"üß† {zid}" for zid in db["zga"]])
        owner = f"üëë {OWNER_ID} ({OWNER_USERNAME})"
        await msg.reply(f"üë• –ê–¥–º–∏–Ω—ã:\n{admins or '‚Äî'}\n\nüß† –ó–ì–ê:\n{zga or '‚Äî'}\n\n{owner}")

    @dp.message_handler(lambda m: m.text and m.text.startswith("—Ä–µ–ø–æ—Ä—Ç "))
    async def handle_report(msg: Message):
        report = msg.text[7:].strip()
        db['reports'].append({"from": msg.from_user.id, "text": report})
        save_db()
        for rmsg in send_report(f"üö® –†–µ–ø–æ—Ä—Ç –æ—Ç {msg.from_user.id}:\n{report}"):
            await msg.bot.send_message(rmsg.chat.id, rmsg.text)
        await msg.reply("‚úÖ –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    @dp.message_handler(lambda m: m.text and m.text.lower() == "—Ä–µ–ø–æ—Ä—Ç—ã")
    async def show_reports(msg: Message):
        if msg.from_user.id != OWNER_ID:
            return
        last = db['reports'][-10:]
        if not last:
            await msg.reply("–ù–µ—Ç –∂–∞–ª–æ–±.")
            return
        text = "üì£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç—ã:\n\n" + "\n\n".join([f"{r['from']}: {r['text']}" for r in last])
        await msg.reply(text)

    @dp.message_handler(lambda m: m.text and m.text.lower() in ["–ø–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞", "–ø–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤"])
    async def call_admin(msg: Message):
        for aid in db["admins"]:
            await msg.bot.send_message(aid, f"üö® –í—ã–∑–æ–≤ –∞–¥–º–∏–Ω–∞ –∏–∑ —á–∞—Ç–∞ {msg.chat.id} –æ—Ç {msg.from_user.id}")
        await msg.reply("üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")

    @dp.message_handler(lambda m: m.text and m.text.lower() == "–ø–æ–∑–≤–∞—Ç—å –∑–≥–∞")
    async def call_zga(msg: Message):
        for zid in db["zga"]:
            await msg.bot.send_message(zid, f"üß† –í—ã–∑–æ–≤ –ó–ì–ê –∏–∑ —á–∞—Ç–∞ {msg.chat.id} –æ—Ç {msg.from_user.id}")
        await msg.reply("üß† –ó–ì–ê —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")

    @dp.message_handler(lambda m: m.text and m.text.lower() in ["–ø–æ–∑–≤–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞", "–ø–æ–∑–≤–∞—Ç—å –µ–≤—É"])
    async def call_owner(msg: Message):
        await msg.bot.send_message(OWNER_ID, f"üëë –í—ã–∑–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ —á–∞—Ç–∞ {msg.chat.id} –æ—Ç {msg.from_user.id}")
        await msg.reply("üëë –í–ª–∞–¥–µ–ª–µ—Ü —É–≤–µ–¥–æ–º–ª—ë–Ω.")

    @dp.message_handler(lambda m: m.text and m.text.lower() == "—Ñ–∞—Ä–º–∞")
    async def farm(msg: Message):
        uid = str(msg.from_user.id)
        now = time.time()
        if uid in cooldowns and now - cooldowns[uid] < 180:
            return await msg.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.")
        cooldowns[uid] = now
        db['balance'][uid] = db['balance'].get(uid, 0) + 10
        save_db()
        await msg.reply("üí∞ –¢—ã –ø–æ–ª—É—á–∏–ª 10 Hiscoin!")

    @dp.message_handler(lambda m: m.text and m.text.lower() == "–º–æ–π –º–µ—à–æ–∫")
    async def my_bag(msg: Message):
        uid = str(msg.from_user.id)
        bal = db['balance'].get(uid, 0)
        await msg.reply(f"üíº –í —Ç–≤–æ–µ–º –º–µ—à–∫–µ {bal} Hiscoin")

    @dp.message_handler(lambda m: m.text and m.text.lower() == "—Ç–æ–ø —Ö–∏—Å")
    async def top_hiscoin(msg: Message):
        data = sorted(db['balance'].items(), key=lambda x: x[1], reverse=True)[:10]
        text = "üèÜ –¢–æ–ø Hiscoin:\n"
        for i, (uid, val) in enumerate(data, 1):
            text += f"{i}. {uid}: {val} üí∞\n"
        await msg.reply(text)

    @dp.message_handler(lambda m: m.reply_to_message and m.text.startswith("+—Ä–∞–Ω–≥ "))
    async def increase_rank(msg: Message):
        if not is_admin(msg.from_user.id): return
        try:
            n = int(msg.text.split()[1])
            uid = str(msg.reply_to_message.from_user.id)
            db['ranks'][uid] = min(10, db['ranks'].get(uid, 0) + n)
            save_db()
            await msg.reply(f"‚úÖ –†–∞–Ω–≥ –ø–æ–≤—ã—à–µ–Ω –¥–æ {db['ranks'][uid]}")
        except:
            await msg.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞.")

    @dp.message_handler(lambda m: m.reply_to_message and m.text.startswith("-—Ä–∞–Ω–≥ "))
    async def decrease_rank(msg: Message):
        if not is_admin(msg.from_user.id): return
        try:
            n = int(msg.text.split()[1])
            uid = str(msg.reply_to_message.from_user.id)
            db['ranks'][uid] = max(0, db['ranks'].get(uid, 0) - n)
            if db['ranks'][uid] == 0:
                db['ranks'].pop(uid)
            save_db()
            await msg.reply("‚ö†Ô∏è –†–∞–Ω–≥ –ø–æ–Ω–∏–∂–µ–Ω.")
        except:
            await msg.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞.")

    @dp.message_handler(lambda m: m.text and m.text.lower() == "—Ä–∞–Ω–≥")
    async def show_rank(msg: Message):
        uid = str(msg.from_user.id)
        rank = db['ranks'].get(uid, 0)
        await msg.reply(f"üéñÔ∏è –¢–≤–æ–π —Ä–∞–Ω–≥: {rank}")

    @dp.message_handler(lambda m: m.text and m.text.startswith("–≤–∏–∫–∏–ø–µ–¥–∏—è "))
    async def wikipedia_query(msg: Message):
        query = msg.text.split(" ", 1)[1]
        await msg.reply(f"üîç Wikipedia: {query} (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥–ª—É—à–µ–Ω)")

    @dp.message_handler(lambda m: m.text and m.text.lower() == "!–ø—Ä–∞–∑–¥–Ω–∏–∫")
    async def pin_fest(msg: Message):
        await msg.pin()
        await msg.reply("üìå –ü—Ä–∞–∑–¥–Ω–∏–∫ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω!")

    @dp.message_handler(lambda m: m.text and m.text == ".ping")
    async def auto_ping(msg: Message):
        await msg.reply("üèì –Ø –∑–¥–µ—Å—å!")

    @dp.message_handler(lambda m: m.text and "–±–æ—Ç" in m.text.lower())
    async def pretty_bot_reply(msg: Message):
        phrases = ["–Ø –∑–¥–µ—Å—å, –º–∏–ª–æ—Ä–¥!", "–í–∞—à –±–æ—Ç –∫ —É—Å–ª—É–≥–∞–º.", "–ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∏–∫–∞–∑—ã."]
        await msg.reply(random.choice(phrases))
