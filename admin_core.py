import json
import os
import time
from aiogram import Router, types, F
from aiogram.filters import Command

router = Router()

DATA_FILE = "admin_data.json"
OWNER_ID = 8174117949
OWNER_USERNAME = "@NEWADA_Night"

if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w") as f:
        json.dump({
            "admins": [],
            "zga": [],
            "hiscoin": {},
            "ranks": {},
            "admin_chat": None,
            "reports": []
        }, f)

with open(DATA_FILE, "r") as f:
    db = json.load(f)

def save_db():
    with open(DATA_FILE, "w") as f:
        json.dump(db, f)

cooldowns = {}

def is_owner(user_id: int):
    return user_id == OWNER_ID

@router.message(Command("—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω —á–∞—Ç"))
async def set_admin_chat(message: types.Message):
    if not is_owner(message.from_user.id):
        return
    db["admin_chat"] = message.chat.id
    save_db()
    await message.reply("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —ç—Ç–æ—Ç —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω-—Ü–µ–Ω—Ç—Ä.")

@router.message(F.text.lower().startswith("—Ä–µ–ø–æ—Ä—Ç"))
async def report_admins(message: types.Message):
    text = message.text[6:].strip()
    if not text:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã.")
        return
    db["reports"].append({"user": message.from_user.id, "text": text})
    db["reports"] = db["reports"][-10:]
    save_db()
    admin_chat = db.get("admin_chat")
    if admin_chat:
        await message.bot.send_message(admin_chat, f"üö® –†–µ–ø–æ—Ä—Ç –æ—Ç <a href='tg://user?id={message.from_user.id}'>{message.from_user.full_name}</a>:\n{text}")
    await message.reply("üì® –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@router.message(Command("–ø—Ä–æ—Å–º–æ—Ç—Ä_—Ä–µ–ø–æ—Ä—Ç–æ–≤"))
async def show_reports(message: types.Message):
    if not is_owner(message.from_user.id):
        return
    if not db["reports"]:
        await message.reply("–ù–µ—Ç —Ä–µ–ø–æ—Ä—Ç–æ–≤.")
        return
    text = "\n\n".join([f"üë§ <code>{r['user']}</code>:\n{r['text']}" for r in db["reports"]])
    await message.reply(f"<b>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç—ã:</b>\n{text}")

@router.message(F.text.lower().in_([
    "–ø–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞", "–ø–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤", "–ø–æ–∑–≤–∞—Ç—å –∑–≥–∞",
    "–ø–æ–∑–≤–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞", "–ø–æ–∑–≤–∞—Ç—å –µ–≤—É", "–∞–¥–º–∏–Ω", "–∞–¥–º–∏–Ω—ã", "–∑–≥–∞", "–µ–≤–∞"
]))
async def call_admins(message: types.Message):
    call_map = {
        "–ø–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞": "üì£ –í—ã–∑–æ–≤: –æ–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω!",
        "–ø–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤": "üì£ –í—ã–∑–æ–≤: –≤—Å–µ –∞–¥–º–∏–Ω—ã, –Ω–∞ —Å–≤—è–∑–∏!",
        "–ø–æ–∑–≤–∞—Ç—å –∑–≥–∞": "üì£ –í—ã–∑–æ–≤: –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω—à–∏!",
        "–ø–æ–∑–≤–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞": f"üì£ –í—ã–∑–æ–≤: {OWNER_USERNAME}, —Ç—ã –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å!",
        "–ø–æ–∑–≤–∞—Ç—å –µ–≤—É": f"üì£ –í—ã–∑–æ–≤: {OWNER_USERNAME} (–ï–≤–∞), —Ç—ã –Ω—É–∂–Ω–∞!",
        "–∞–¥–º–∏–Ω": "‚ö†Ô∏è –ö—Ç–æ-—Ç–æ –∑–≤–∞–ª –∞–¥–º–∏–Ω–∞?",
        "–∞–¥–º–∏–Ω—ã": "‚ö†Ô∏è –í—ã–∑—ã–≤–∞—é—Ç—Å—è –∞–¥–º–∏–Ω—ã...",
        "–∑–≥–∞": "‚ö†Ô∏è –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∞ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ...",
        "–µ–≤–∞": f"‚ö†Ô∏è @{OWNER_USERNAME} —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∑–¥–µ—Å—å.",
    }
    await message.reply(call_map[message.text.lower()])

@router.message(F.text.lower() == "—Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
async def list_admins(message: types.Message):
    text = "<b>üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:</b>\n"
    text += f"üëë –í–ª–∞–¥–µ–ª–µ—Ü: <a href='tg://user?id={OWNER_ID}'>{OWNER_USERNAME}</a> ‚Äî <code>{OWNER_ID}</code>\n\n"

    if db["zga"]:
        text += "üõ° –ó–ì–ê:\n"
        for uid in db["zga"]:
            text += f"‚Ä¢ <a href='tg://user?id={uid}'>ID: {uid}</a>\n"
    else:
        text += "üõ° –ó–ì–ê: –Ω–µ—Ç\n"

    if db["admins"]:
        text += "\nüë®‚Äçüíª –ê–¥–º–∏–Ω—ã:\n"
        for uid in db["admins"]:
            text += f"‚Ä¢ <a href='tg://user?id={uid}'>ID: {uid}</a>\n"
    else:
        text += "\nüë®‚Äçüíª –ê–¥–º–∏–Ω–æ–≤ –Ω–µ—Ç\n"

    await message.reply(text)

@router.message(F.text.lower() == "—Ñ–∞—Ä–º")
async def farm(message: types.Message):
    user_id = str(message.from_user.id)
    now = time.time()
    if user_id in cooldowns and now - cooldowns[user_id] < 180:
        await message.reply("‚åõ –ñ–¥–∏ 3 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞—Ä–º–æ–º.")
        return
    cooldowns[user_id] = now
    db["hiscoin"][user_id] = db["hiscoin"].get(user_id, 0) + 10
    save_db()
    await message.reply("üí∞ +10 Hiscoin!")

@router.message(F.text.lower() == "–º–æ–π –º–µ—à–æ–∫")
async def my_bag(message: types.Message):
    user_id = str(message.from_user.id)
    coins = db["hiscoin"].get(user_id, 0)
    await message.reply(f"üéí –£ —Ç–µ–±—è {coins} Hiscoin.")

@router.message(F.text.lower() == "—Ç–æ–ø hiscoin")
async def top_hiscoin(message: types.Message):
    if not db["hiscoin"]:
        await message.reply("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Ñ–∞—Ä–º–∏–ª.")
        return
    sorted_users = sorted(db["hiscoin"].items(), key=lambda x: x[1], reverse=True)[:10]
    text = "<b>üèÜ –¢–æ–ø Hiscoin:</b>\n"
    for i, (uid, coins) in enumerate(sorted_users, 1):
        text += f"{i}. <a href='tg://user?id={uid}'>ID {uid}</a> ‚Äî {coins}üí∞\n"
    await message.reply(text)

@router.message(Command("—Ä–∞–Ω–≥"))
async def show_rank(message: types.Message):
    user_id = str(message.from_user.id)
    rank = db["ranks"].get(user_id, 0)
    await message.reply(f"üèÖ –¢–≤–æ–π —Ä–∞–Ω–≥: {rank}")

@router.message(F.text.lower().startswith("+—Ä–∞–Ω–≥"))
async def add_rank(message: types.Message):
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    try:
        value = int(message.text.split()[1])
    except:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏ —á–∏—Å–ª–æ —Ä–∞–Ω–≥–∞.")
        return
    user_id = str(message.reply_to_message.from_user.id)
    if value == 10 and not is_owner(message.from_user.id):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å 10 —Ä–∞–Ω–≥.")
        return
    db["ranks"][user_id] = db["ranks"].get(user_id, 0) + value
    save_db()
    await message.reply(f"‚úÖ –†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω: {db['ranks'][user_id]}")

@router.message(F.text.lower().startswith("-—Ä–∞–Ω–≥"))
async def remove_rank(message: types.Message):
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    try:
        value = int(message.text.split()[1])
    except:
        await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è.")
        return
    user_id = str(message.reply_to_message.from_user.id)
    db["ranks"][user_id] = max(0, db["ranks"].get(user_id, 0) - value)
    if db["ranks"][user_id] == 0:
        del db["ranks"][user_id]
    save_db()
    await message.reply("‚¨áÔ∏è –†–∞–Ω–≥ –ø–æ–Ω–∏–∂–µ–Ω.")

@router.message(F.text.lower().startswith("–≤–∏–∫–∏–ø–µ–¥–∏—è"))
async def wikipedia(message: types.Message):
    query = message.text[9:].strip()
    if not query:
        await message.reply("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        return
    await message.reply(f"üîç <b>{query}</b> ‚Äî (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–µ–π–∫–æ–≤—ã–π, –∑–∞–≥–ª—É—à–∫–∞).")

@router.message(F.text.lower() == "!–ø—Ä–∞–∑–¥–Ω–∏–∫")
async def pin_holiday(message: types.Message):
    await message.pin()
    await message.reply("üìå –ü—Ä–∞–∑–¥–Ω–∏–∫ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω!")

@router.message(F.text.lower() == ".ping")
async def ping_reply(message: types.Message):
    await message.reply("üèì –ü–∏–Ω–≥-–ø–æ–Ω–≥, —è –Ω–∞ —Å–≤—è–∑–∏!")

@router.message(F.text.lower() == "–±–æ—Ç")
async def bot_reply(message: types.Message):
    await message.reply("ü§ñ –Ø —Ç—É—Ç, –∫—Ä–∞—Å–∏–≤—ã–π –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å!")
