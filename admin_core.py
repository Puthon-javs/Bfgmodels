admin_core.py

from aiogram import types, Router, F from aiogram.types import Message from aiogram.utils.markdown import hbold from aiogram.filters import Command import time import wikipedia

router = Router()

–•—Ä–∞–Ω–∏–ª–∏—â–µ

user_data = {} admin_chat_id = None hiscoin_balance = {} last_farm_time = {} user_ranks = {} rank_titles = { 1: "‚òÖ –†—è–¥–æ–≤–æ–π", 2: "‚òÜ –ï—Ñ—Ä–µ–π—Ç–æ—Ä", 3: "‚öîÔ∏è –ö–∞–ø—Ä–∞–ª", 4: "‚ö° –°–µ—Ä–∂–∞–Ω—Ç", 5: "üèõÔ∏è –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç", 6: "üí™ –ú–∞–π–æ—Ä", 7: "üõ°Ô∏è –ü–æ–ª–∫–æ–≤–Ω–∏–∫", 8: "üåã –ì–µ–Ω–µ—Ä–∞–ª", 9: "üí´ –ì–ª–∞–≤–Ω–æ–∫–æ–º–∞–Ω–¥—É—é—â–∏–π", 10: "üî• –í–ª–∞–¥—ã–∫–∞ –≤–æ–π–Ω—ã" }

–ê–¥–º–∏–Ω —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∞

@router.message(Command("—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω —á–∞—Ç")) async def set_admin_chat(message: Message): global admin_chat_id admin_chat_id = message.chat.id await message.reply("‚úÖ –ê–¥–º–∏–Ω-—á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

–†–µ–ø–æ—Ä—Ç

@router.message(Command("—Ä–µ–ø–æ—Ä—Ç")) async def report_handler(message: Message): if not admin_chat_id: return await message.reply("‚ùå –ê–¥–º–∏–Ω-—á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.") await message.reply("‚è≥ –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.") await message.bot.send_message(admin_chat_id, f"‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç –æ—Ç @{message.from_user.username}:\n{message.text}")

–í—ã–∑–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏

@router.message(F.text.lower().in_(["–∞–¥–º–∏–Ω", "–ø–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞", "–ø–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤"])) async def call_admin(message: Message): await message.reply("üì¢ –í—ã–∑–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")

@router.message(F.text.lower() == "–ø–æ–∑–≤–∞—Ç—å –∑–≥–∞") async def call_zga(message: Message): await message.reply("üë©‚Äç‚úàÔ∏è –í—ã–∑–≤–∞–Ω –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω—à–∏!")

@router.message(F.text.lower().in_(["–ø–æ–∑–≤–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞", "–ø–æ–∑–≤–∞—Ç—å –µ–≤—É"])) async def call_owner(message: Message): await message.reply("üëë –í—ã–∑–≤–∞–Ω –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –ï–≤–∞!")

–í–∏–∫–∏–ø–µ–¥–∏—è

@router.message(Command("–≤–∏–∫–∏–ø–µ–¥–∏—è")) async def wikipedia_search(message: Message): query = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None if not query: return await message.reply("‚ùå –£–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å: –≤–∏–∫–∏–ø–µ–¥–∏—è <–∑–∞–ø—Ä–æ—Å>") try: wikipedia.set_lang("ru") summary = wikipedia.summary(query, sentences=2) await message.reply(f"üîé {hbold(query)}:\n{summary}") except Exception as e: await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å—é.")

–ü—Ä–∞–∑–¥–Ω–∏–∫

@router.message(F.text == "!–ø—Ä–∞–∑–¥–Ω–∏–∫") async def fix_holiday(message: Message): try: await message.pin() await message.reply("üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω!") except: await message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")

–í—ã–∑–æ–≤ .ping, –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –æ–±—â–∏–π –º–æ–¥—É–ª—å

@router.message(F.text == ".ping") async def ping_passthrough(message: Message): # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –¥—Ä—É–≥–æ–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç .ping pass

–û—Ç–≤–µ—Ç –Ω–∞ —Å–ª–æ–≤–æ "–±–æ—Ç"

@router.message(F.text.lower() == "–±–æ—Ç") async def bot_react(message: Message): await message.reply("ü§ñ –Ø –∑–¥–µ—Å—å, —Å–ª—É—à–∞—é —Ç–µ–±—è!")

–§–∞—Ä–º Hiscoin

@router.message(Command("—Ñ–∞—Ä–º")) async def farm_command(message: Message): uid = message.from_user.id now = time.time() if uid in last_farm_time and now - last_farm_time[uid] < 180: return await message.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏ 3 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —Ñ–∞—Ä–º–æ–º.")

hiscoin_balance[uid] = hiscoin_balance.get(uid, 0) + 10
last_farm_time[uid] = now
await message.reply("üí∞ –¢—ã –ø–æ–ª—É—á–∏–ª 10 Hiscoin!")

–ë–∞–ª–∞–Ω—Å

@router.message(Command("–º–µ—à–æ–∫")) async def check_balance(message: Message): uid = message.from_user.id balance = hiscoin_balance.get(uid, 0) await message.reply(f"üéí –£ —Ç–µ–±—è {balance} Hiscoin.")

+—Ä–∞–Ω–≥

@router.message(Command("+—Ä–∞–Ω–≥")) async def set_rank(message: Message): if not message.reply_to_message: return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.") args = message.text.split() if len(args) < 2: return await message.reply("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ä–∞–Ω–≥–∞.") rank = int(args[1]) if rank == 10 and message.from_user.username != "–ï–≤–∞": return await message.reply("üö´ –¢–æ–ª—å–∫–æ –ï–≤–∞ –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å 10-–π —Ä–∞–Ω–≥.") user_ranks[message.reply_to_message.from_user.id] = rank await message.reply(f"‚úÖ –†–∞–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rank_titles.get(rank, str(rank))}")

-—Ä–∞–Ω–≥

@router.message(Command("-—Ä–∞–Ω–≥")) async def downgrade_rank(message: Message): if not message.reply_to_message: return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.") args = message.text.split() if len(args) < 2: return await message.reply("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è.") rank = int(args[1]) target_id = message.reply_to_message.from_user.id current = user_ranks.get(target_id, 0) if current <= rank: user_ranks[target_id] = 0 return await message.reply("‚ùå –†–∞–Ω–≥ —Å–Ω—è—Ç. –ò–≥—Ä–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞.") user_ranks[target_id] = current - rank await message.reply(f"üìâ –†–∞–Ω–≥ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ: {rank_titles.get(user_ranks[target_id], user_ranks[target_id])}")

–ú–æ–π —Ä–∞–Ω–≥

@router.message(Command("—Ä–∞–Ω–≥")) async def my_rank(message: Message): uid = message.from_user.id rank = user_ranks.get(uid, 0) title = rank_titles.get(rank, "–ë–µ–∑ —Ä–∞–Ω–≥–∞") await message.reply(f"üéñÔ∏è –¢–≤–æ–π —Ä–∞–Ω–≥: {title} ({rank})")

