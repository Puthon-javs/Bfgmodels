from aiogram import types, Dispatcher
import time

# === –í–ª–∞–¥–µ–ª–µ—Ü ===
OWNER_ID = 8174117949  # üëà –£–∫–∞–∂–∏ —Å–≤–æ–π user_id
OWNER_USERNAME = "NEWADA_Night"  # üëà –£–∫–∞–∂–∏ —Å–≤–æ–π username –±–µ–∑ "@"

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
user_data = {}
admin_chat_id = None
hiscoin_balance = {}
last_farm_time = {}
user_ranks = {OWNER_ID: 10}  # –í–ª–∞–¥–µ–ª–µ—Ü —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ—Ç 10 —Ä–∞–Ω–≥

rank_titles = {
    1: "‚òÖ –†—è–¥–æ–≤–æ–π",
    2: "‚òÜ –ï—Ñ—Ä–µ–π—Ç–æ—Ä",
    3: "‚öîÔ∏è –ö–∞–ø—Ä–∞–ª",
    4: "‚ö° –°–µ—Ä–∂–∞–Ω—Ç",
    5: "üèõÔ∏è –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç",
    6: "üí™ –ú–∞–π–æ—Ä",
    7: "üõ°Ô∏è –ü–æ–ª–∫–æ–≤–Ω–∏–∫",
    8: "üåã –ì–µ–Ω–µ—Ä–∞–ª",
    9: "üí´ –ì–ª–∞–≤–Ω–æ–∫–æ–º–∞–Ω–¥—É—é—â–∏–π",
    10: "üî• –í–ª–∞–¥—ã–∫–∞ –≤–æ–π–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥–º–∏–Ω-—á–∞—Ç–∞
async def set_admin_chat(message: types.Message):
    global admin_chat_id
    admin_chat_id = message.chat.id
    await message.reply("‚úÖ –ê–¥–º–∏–Ω-—á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –†–µ–ø–æ—Ä—Ç
async def report_handler(message: types.Message):
    if not admin_chat_id:
        return await message.reply("‚ùå –ê–¥–º–∏–Ω-—á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    await message.reply("‚è≥ –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    await message.bot.send_message(admin_chat_id, f"‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç –æ—Ç @{message.from_user.username}:\n{message.text}")

# –í—ã–∑–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def call_admin(message: types.Message):
    await message.reply("üì¢ –í—ã–∑–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")

async def call_zga(message: types.Message):
    await message.reply("üë©‚Äç‚úàÔ∏è –í—ã–∑–≤–∞–Ω –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω—à–∏!")

async def call_owner(message: types.Message):
    await message.reply(f"üëë –í—ã–∑–≤–∞–Ω –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî @{OWNER_USERNAME}!")
    try:
        await message.bot.send_message(OWNER_ID, f"üö® –í—ã–∑–æ–≤ –æ—Ç @{message.from_user.username} –≤ —á–∞—Ç–µ {message.chat.title or message.chat.id}")
    except Exception as e:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")

# .ping
async def ping_passthrough(message: types.Message):
    pass

# –û—Ç–≤–µ—Ç –Ω–∞ "–±–æ—Ç"
async def bot_react(message: types.Message):
    await message.reply("ü§ñ –Ø –∑–¥–µ—Å—å, —Å–ª—É—à–∞—é —Ç–µ–±—è!")

# –ü—Ä–∞–∑–¥–Ω–∏–∫
async def fix_holiday(message: types.Message):
    try:
        await message.pin()
        await message.reply("üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω!")
    except:
        await message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")

# –§–∞—Ä–º Hiscoin
async def farm_command(message: types.Message):
    uid = message.from_user.id
    now = time.time()
    if uid in last_farm_time and now - last_farm_time[uid] < 180:
        return await message.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏ 3 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —Ñ–∞—Ä–º–æ–º.")
    hiscoin_balance[uid] = hiscoin_balance.get(uid, 0) + 10
    last_farm_time[uid] = now
    await message.reply("üí∞ –¢—ã –ø–æ–ª—É—á–∏–ª 10 Hiscoin!")

# –ë–∞–ª–∞–Ω—Å
async def check_balance(message: types.Message):
    uid = message.from_user.id
    balance = hiscoin_balance.get(uid, 0)
    await message.reply(f"üéí –£ —Ç–µ–±—è {balance} Hiscoin.")

# +—Ä–∞–Ω–≥
async def set_rank(message: types.Message):
    if not message.reply_to_message:
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    args = message.text.split()
    if len(args) < 2:
        return await message.reply("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ä–∞–Ω–≥–∞.")
    try:
        rank = int(args[1])
    except ValueError:
        return await message.reply("‚ùå –ù–æ–º–µ—Ä —Ä–∞–Ω–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    if rank == 10 and message.from_user.id != OWNER_ID:
        return await message.reply("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å 10-–π —Ä–∞–Ω–≥.")
    user_ranks[message.reply_to_message.from_user.id] = rank
    await message.reply(f"‚úÖ –†–∞–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rank_titles.get(rank, str(rank))}")

# -—Ä–∞–Ω–≥
async def downgrade_rank(message: types.Message):
    if not message.reply_to_message:
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    args = message.text.split()
    if len(args) < 2:
        return await message.reply("‚ùå –£–∫–∞–∂–∏ —á–∏—Å–ª–æ –ø–æ–Ω–∏–∂–µ–Ω–∏—è.")
    try:
        rank = int(args[1])
    except ValueError:
        return await message.reply("‚ùå –£–∫–∞–∂–∏ —á–∏—Å–ª–æ –ø–æ–Ω–∏–∂–µ–Ω–∏—è.")
    target_id = message.reply_to_message.from_user.id
    current = user_ranks.get(target_id, 0)
    if current <= rank:
        user_ranks[target_id] = 0
        return await message.reply("‚ùå –†–∞–Ω–≥ —Å–Ω—è—Ç. –ò–≥—Ä–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞.")
    user_ranks[target_id] = current - rank
    await message.reply(f"üìâ –†–∞–Ω–≥ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ: {rank_titles.get(user_ranks[target_id], user_ranks[target_id])}")

# /—Ä–∞–Ω–≥
async def my_rank(message: types.Message):
    uid = message.from_user.id
    rank = user_ranks.get(uid, 0)
    title = rank_titles.get(rank, "–ë–µ–∑ —Ä–∞–Ω–≥–∞")
    await message.reply(f"üéñÔ∏è –¢–≤–æ–π —Ä–∞–Ω–≥: {title} ({rank})")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(set_admin_chat, commands=["—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–∞–¥–º–∏–Ω_—á–∞—Ç"])
    dp.register_message_handler(report_handler, commands=["—Ä–µ–ø–æ—Ä—Ç"])
    dp.register_message_handler(call_admin, lambda m: m.text.lower() in ["–∞–¥–º–∏–Ω", "–ø–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞", "–ø–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤"])
    dp.register_message_handler(call_zga, lambda m: m.text.lower() == "–ø–æ–∑–≤–∞—Ç—å –∑–≥–∞")
    dp.register_message_handler(call_owner, lambda m: m.text.lower() in ["–ø–æ–∑–≤–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞", "–ø–æ–∑–≤–∞—Ç—å –µ–≤—É"])
    dp.register_message_handler(ping_passthrough, lambda m: m.text == ".ping")
    dp.register_message_handler(bot_react, lambda m: m.text.lower() == "–±–æ—Ç")
    dp.register_message_handler(fix_holiday, lambda m: m.text == "!–ø—Ä–∞–∑–¥–Ω–∏–∫")
    dp.register_message_handler(farm_command, commands=["—Ñ–∞—Ä–º"])
    dp.register_message_handler(check_balance, commands=["–º–µ—à–æ–∫"])
    dp.register_message_handler(set_rank, commands=["+—Ä–∞–Ω–≥"])
    dp.register_message_handler(downgrade_rank, commands=["-—Ä–∞–Ω–≥"])
    dp.register_message_handler(my_rank, commands=["—Ä–∞–Ω–≥"])
