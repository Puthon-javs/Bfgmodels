import json, time, os
from datetime import datetime
from aiogram import types, Dispatcher

OWNER_ID = 8174117949
OWNER_USERNAME = "NEWADA_Night"

# === –ü—É—Ç—å –∫ –±–∞–∑–∞–º ===
BALANCE_FILE = "hiscoin_balance.json"
RANK_FILE = "user_ranks.json"
REPORT_FILE = "reports.json"

# === –•—Ä–∞–Ω–∏–ª–∏—â–∞ ===
admin_chat_id = None
last_farm_time = {}
hiscoin_balance = {}
user_ranks = {str(OWNER_ID): 10}
reports = []

rank_titles = {
    1: "‚òÖ –†—è–¥–æ–≤–æ–π", 2: "‚òÜ –ï—Ñ—Ä–µ–π—Ç–æ—Ä", 3: "‚öîÔ∏è –ö–∞–ø—Ä–∞–ª", 4: "‚ö° –°–µ—Ä–∂–∞–Ω—Ç",
    5: "üèõÔ∏è –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç", 6: "üí™ –ú–∞–π–æ—Ä", 7: "üõ°Ô∏è –ü–æ–ª–∫–æ–≤–Ω–∏–∫",
    8: "üåã –ì–µ–Ω–µ—Ä–∞–ª", 9: "üí´ –ì–ª–∞–≤–Ω–æ–∫–æ–º–∞–Ω–¥—É—é—â–∏–π", 10: "üî• –í–ª–∞–¥—ã–∫–∞ –≤–æ–π–Ω—ã"
}

# === –ó–∞–≥—Ä—É–∑–∫–∞ / –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
def save_data():
    with open(BALANCE_FILE, "w") as f: json.dump(hiscoin_balance, f)
    with open(RANK_FILE, "w") as f: json.dump(user_ranks, f)
    with open(REPORT_FILE, "w") as f: json.dump(reports, f)

def load_data():
    global hiscoin_balance, user_ranks, reports
    if os.path.exists(BALANCE_FILE):
        with open(BALANCE_FILE, "r") as f: hiscoin_balance = json.load(f)
    if os.path.exists(RANK_FILE):
        with open(RANK_FILE, "r") as f: user_ranks = json.load(f)
    if os.path.exists(REPORT_FILE):
        with open(REPORT_FILE, "r") as f: reports = json.load(f)

# === –ê–¥–º–∏–Ω-—á–∞—Ç ===
async def set_admin_chat(message: types.Message):
    global admin_chat_id
    admin_chat_id = message.chat.id
    await message.reply("‚úÖ –ê–¥–º–∏–Ω-—á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# === –†–µ–ø–æ—Ä—Ç ===
async def report_handler(message: types.Message):
    if not admin_chat_id:
        return await message.reply("‚ùå –ê–¥–º–∏–Ω-—á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    report_text = message.text.strip()
    username = message.from_user.username or message.from_user.full_name
    entry = {
        "user_id": message.from_user.id,
        "username": username,
        "report": report_text,
        "datetime": now
    }
    reports.append(entry)
    save_data()
    msg = f"‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç –æ—Ç @{username}\nüïí {now}\nüìÑ {report_text}"
    await message.bot.send_message(admin_chat_id, msg)
    try:
        await message.bot.send_message(OWNER_ID, msg)
    except:
        pass
    await message.reply("‚è≥ –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

# === –§–∞—Ä–º Hiscoin ===
async def farm_command(message: types.Message):
    uid = str(message.from_user.id)
    now = time.time()
    if uid in last_farm_time and now - last_farm_time[uid] < 180:
        return await message.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏ 3 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —Ñ–∞—Ä–º–æ–º.")
    hiscoin_balance[uid] = hiscoin_balance.get(uid, 0) + 10
    last_farm_time[uid] = now
    save_data()
    await message.reply("üí∞ –¢—ã –ø–æ–ª—É—á–∏–ª 10 Hiscoin!")

# === –ë–∞–ª–∞–Ω—Å ===
async def check_balance(message: types.Message):
    uid = str(message.from_user.id)
    balance = hiscoin_balance.get(uid, 0)
    await message.reply(f"üéí –£ —Ç–µ–±—è {balance} Hiscoin.")

# === –¢–æ–ø Hiscoin ===
async def top_hiscoin(message: types.Message):
    if not hiscoin_balance:
        return await message.reply("üìâ –ù–∏–∫—Ç–æ –µ—â—ë –Ω–µ —Ñ–∞—Ä–º–∏–ª.")
    sorted_users = sorted(hiscoin_balance.items(), key=lambda x: x[1], reverse=True)[:10]
    result = "üèÜ –¢–æ–ø Hiscoin:\n"
    for i, (uid, score) in enumerate(sorted_users, 1):
        rank = user_ranks.get(uid, 0)
        result += f"{i}. ID: {uid} ‚Äî {score} üí∞ (–†–∞–Ω–≥: {rank_titles.get(rank, '‚Äî')})\n"
    await message.reply(result)

# === +—Ä–∞–Ω–≥ ===
async def set_rank(message: types.Message):
    if not message.reply_to_message:
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    args = message.text.split()
    if len(args) < 2:
        return await message.reply("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ä–∞–Ω–≥–∞.")
    try:
        rank = int(args[1])
    except ValueError:
        return await message.reply("‚ùå –ù–æ–º–µ—Ä —Ä–∞–Ω–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    if rank == 10 and message.from_user.id != OWNER_ID:
        return await message.reply("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å 10-–π —Ä–∞–Ω–≥.")
    user_ranks[str(message.reply_to_message.from_user.id)] = rank
    save_data()
    await message.reply(f"‚úÖ –†–∞–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rank_titles.get(rank, str(rank))}")

# === -—Ä–∞–Ω–≥ ===
async def downgrade_rank(message: types.Message):
    if not message.reply_to_message:
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    args = message.text.split()
    if len(args) < 2:
        return await message.reply("‚ùå –£–∫–∞–∂–∏ —á–∏—Å–ª–æ –ø–æ–Ω–∏–∂–µ–Ω–∏—è.")
    try:
        rank = int(args[1])
    except ValueError:
        return await message.reply("‚ùå –£–∫–∞–∂–∏ —á–∏—Å–ª–æ –ø–æ–Ω–∏–∂–µ–Ω–∏—è.")
    target_id = str(message.reply_to_message.from_user.id)
    current = user_ranks.get(target_id, 0)
    if current <= rank:
        user_ranks[target_id] = 0
        save_data()
        return await message.reply("‚ùå –†–∞–Ω–≥ —Å–Ω—è—Ç. –ò–≥—Ä–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞.")
    user_ranks[target_id] = current - rank
    save_data()
    await message.reply(f"üìâ –†–∞–Ω–≥ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ: {rank_titles.get(user_ranks[target_id], user_ranks[target_id])}")

# === /—Ä–∞–Ω–≥ ===
async def my_rank(message: types.Message):
    uid = str(message.from_user.id)
    rank = user_ranks.get(uid, 0)
    title = rank_titles.get(rank, "–ë–µ–∑ —Ä–∞–Ω–≥–∞")
    await message.reply(f"üéñÔ∏è –¢–≤–æ–π —Ä–∞–Ω–≥: {title} ({rank})")

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
def register_handlers(dp: Dispatcher):
    load_data()
    dp.register_message_handler(set_admin_chat, lambda m: m.text.lower().startswith("—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω"))
    dp.register_message_handler(report_handler, lambda m: m.text.lower().startswith("—Ä–µ–ø–æ—Ä—Ç"))
    dp.register_message_handler(farm_command, lambda m: m.text.lower() == "—Ñ–∞—Ä–º")
    dp.register_message_handler(check_balance, lambda m: m.text.lower() == "–º–æ–π –º–µ—à–æ–∫")
    dp.register_message_handler(top_hiscoin, lambda m: m.text.lower() == "—Ç–æ–ø hiscoin")
    dp.register_message_handler(set_rank, lambda m: m.text.lower().startswith("+—Ä–∞–Ω–≥"))
    dp.register_message_handler(downgrade_rank, lambda m: m.text.lower().startswith("-—Ä–∞–Ω–≥"))
    dp.register_message_handler(my_rank, lambda m: m.text.lower() == "—Ä–∞–Ω–≥")
